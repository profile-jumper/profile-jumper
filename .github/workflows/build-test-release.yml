name: Build and Test and Release

on: push

jobs:
  collect_commit_message:
    runs-on: ubuntu-latest
    outputs:
      COMMIT_MESSAGE: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}
      RELEASE_VERSION: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}
      TAG_VERSION: ${{ steps.get-tag-version.outputs.TAG_VERSION }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - id: get-commit-message
        name: collect commit message
        run: |
          echo "COMMIT_MESSAGE=$(git show -s --format=%s)" >> "$GITHUB_OUTPUT"
      - id: get-release-version
        name: extract accessible release
        env:
          COMMIT_MESSAGE: ${{needs.collect_commit_message.outputs.COMMIT_MESSAGE}}
        run: |
          RELEASE_COMMIT_PART=$(echo $COMMIT_MESSAGE | awk '{for(i=1;i<=NF;i++) if(tolower($i) ~ /release:[0-9]+\.[0-9]+\.[0-9]+/) print tolower($i)}')
          if [ "${#RELEASE_COMMIT_PART}" -ge 3 ] 
          then
            echo "RELEASE_VERSION=${RELEASE_COMMIT_PART#release:}" >> "$GITHUB_OUTPUT"
          fi
      - id: get-tag-version
        name: collect last tag version
        run: |
          LATEST_TAG=$(git tag --sort=-taggerdate | head -1)
          if [ "${#LATEST_TAG}" -ge 3 ]
          then
            echo "TAG_VERSION=$LATEST_TAG" >> "$GITHUB_OUTPUT"
          fi

  build_and_test:
    needs: [collect_commit_message]
    runs-on: ubuntu-latest
    steps:
#      - name: checkout repository
#        uses: actions/checkout@v4
#      - name: setup node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '18.x'
#      - name: install dependencies
#        run: npm install
#      - name: build node app
#        run: npm run build
#      - name: test node app
#        run: npm test
      - name: check vars
        env:
          COMMIT_MESSAGE: ${{needs.collect_commit_message.outputs.COMMIT_MESSAGE}}
          RELEASE_VERSION: ${{needs.collect_commit_message.outputs.RELEASE_VERSION}}
          TAG_VERSION: ${{needs.collect_commit_message.outputs.TAG_VERSION}}
        run: |
          echo "tha vars are commit:[$COMMIT_MESSAGE] release:[$RELEASE_VERSION] tag:[$TAG_VERSION]"


#  should_release:
#    needs: [collect_commit_message, build_and_test]
#    runs-on: ubuntu-latest
#    outputs:
#      release_version: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}
#    steps:
#      - name: Use commit message
#        env:
#          commit_msg: ${{needs.collect_commit_message.outputs.commit_msg}}
#        run: |
#          echo "Release check will use commit message:[${commit_msg}]"
#      - name: Show release version
#        env:
#          commit_msg: ${{needs.collect_commit_message.outputs.commit_msg}}
#        run: |
#          echo ${commit_msg} | awk '{for(i=1;i<=NF;i++) if(tolower($i) ~ /release:[0-9]+\.[0-9]+\.[0-9]+/) print tolower($i)}'
#      - name: Obtain release version
#        id: get-release-version
#        env:
#          commit_msg: ${{needs.collect_commit_message.outputs.commit_msg}}
#        run: |
#          RELEASE_VERSION="$(echo ${commit_msg} | awk '{for(i=1;i<=NF;i++) if(tolower($i) ~ /release:[0-9]+\.[0-9]+\.[0-9]+/) print tolower($i)}')"
#          echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
#      - name: Use release version
#        env:
#          release_version: ${{steps.get-release-version.outputs.RELEASE_VERSION}}
#        run: |
#          echo "RELEASE is:[${release_version}]"
#
