name: Build and Test and Release

on: push

jobs:
  collect_vars:
    runs-on: ubuntu-latest
    outputs:
      COMMIT_MESSAGE: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}
      RELEASE_VERSION: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}
      TAG_VERSION: ${{ steps.get-tag-version.outputs.TAG_VERSION }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - id: get-commit-message
        name: collect commit message
        run: |
          echo "COMMIT_MESSAGE=$(git show -s --format=%s)" >> "$GITHUB_OUTPUT"
      - id: get-release-version
        name: extract accessible release
        env:
          COMMIT_MESSAGE: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}
        run: |
          RELEASE_COMMIT_PART=$(echo $COMMIT_MESSAGE | awk '{for(i=1;i<=NF;i++) if(tolower($i) ~ /release:[0-9]+\.[0-9]+\.[0-9]+/) print tolower($i)}')
          if [ "${#RELEASE_COMMIT_PART}" -ge 3 ] 
          then
            echo "RELEASE_VERSION=${RELEASE_COMMIT_PART#release:}" >> "$GITHUB_OUTPUT"
          fi
      - id: get-tag-version
        name: collect last tag version
        run: |
          LATEST_TAG=$(git tag --sort=-taggerdate | head -1)
          if [ "${#LATEST_TAG}" -ge 3 ]
          then
            echo "TAG_VERSION=$LATEST_TAG" >> "$GITHUB_OUTPUT"
          fi

  build_and_test:
    needs: [collect_vars]
    runs-on: ubuntu-latest
    steps:
#      - name: checkout repository
#        uses: actions/checkout@v4
#      - name: setup node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '18.x'
#      - name: install dependencies
#        run: npm install
#      - name: build node app
#        run: npm run build
#      - name: test node app
#        run: npm test
      - name: just run
        run: |
          echo "building..."

  should_release:
    needs: [build_and_test, collect_vars]
    runs-on: ubuntu-latest
    env:
      COMMIT_MESSAGE: ${{ needs.collect_vars.outputs.COMMIT_MESSAGE }}
      RELEASE_VERSION: ${{ needs.collect_vars.outputs.RELEASE_VERSION }}
      TAG_VERSION: ${{ needs.collect_vars.outputs.TAG_VERSION }}
    outputs:
      SHOULD_RELEASE: ${{ steps.determine-should-release.outputs.SHOULD_RELEASE }}
    steps:
      - id: determine-should-release
        name: determine whether to release
        run: |
          SHOULD_RELEASE=false
          if [ -z ${TAG_VERSION} ] && [ "${#RELEASE_VERSION}" -ge 3 ]; then
            echo "No tag -> but release!"
            echo "SHOULD_RELEASE=true" >> "$GITHUB_OUTPUT"
          elif [ "${#RELEASE_VERSION}" -ge 3 ] && [ "${#TAG_VERSION}" -ge 3 ] && [ $TAG_VERSION != $RELEASE_VERSION ] && [ $RELEASE_VERSION == $(printf "%s\n%s\n" "$RELEASE_VERSION" "$TAG_VERSION" | sort -V | tail -n 1) ] ;  then
            echo "tag and release!"
            echo "SHOULD_RELEASE=true" >> "$GITHUB_OUTPUT"
          fi

  perform_release:
    needs: [should_release, collect_vars]
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: ${{ needs.collect_vars.outputs.RELEASE_VERSION }}
      SHOULD_RELEASE: ${{ needs.should_release.outputs.SHOULD_RELEASE }}
    steps:
      - name: check vars
        run: |
          echo "the vars which will be used are commit:[$RELEASE_VERSION] release:[$RELEASE_VERSION] should release:[$SHOULD_RELEASE]"
